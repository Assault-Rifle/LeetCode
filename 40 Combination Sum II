Given a collection of candidate numbers (candidates) and a target number (target), find all unique combinations in candidates where the candidate numbers sum to target.

Each number in candidates may only be used once in the combination.

Note: The solution set must not contain duplicate combinations.


Don't check at the end (where target is 0) that the solution is unique or not.

Check at the very start and only call recursively for the unique solutions.

class Solution {
public:

    void help(vector<int>& a, int target, int start, vector<vector<int>> &res, vector<int> &temp)
    {
        if(target<0)    return;

        if(target==0)   {   res.push_back(temp);     return;    }

        for(int i=start; i<a.size(); i++)
        {
            if(i>start && a[i]==a[i-1])     continue;

            temp.push_back(a[i]);
            help(a, target-a[i], i+1, res, temp);
            temp.pop_back();
        }
    }

    vector<vector<int>> combinationSum2(vector<int>& candidates, int target) {
        sort(candidates.begin(), candidates.end());
        vector<vector<int>> res;    vector<int>temp;

        help(candidates, target, 0, res, temp);

        return res;
    }
};
