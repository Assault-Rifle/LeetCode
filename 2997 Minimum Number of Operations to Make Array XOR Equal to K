You are given a 0-indexed integer array nums and a positive integer k.

You can apply the following operation on the array any number of times:

Choose any element of the array and flip a bit in its binary representation. Flipping a bit means changing a 0 to 1 or vice versa.
Return the minimum number of operations required to make the bitwise XOR of all elements of the final array equal to k.

Note that you can flip leading zero bits in the binary representation of elements. For example, for the number (101)2 you can flip the fourth bit and obtain (1101)2.


Approach:
Take the XOR or all the elements in the array, call it n

check the binary representations of n and k, find the different bits

These different bits needs to be changed only, count them

We can convert the leading zeroes as well, that means run the loop even if anyone from n or k has become 0, and only stop if both become 0


Code:
class Solution {
    public int minOperations(int[] nums, int k)
    {
        int n = nums[0];

        for(int i=1; i<nums.length; i++)
            n = n ^ nums[i];

        int count=0;

        while(n>0 || k>0)
        {
            if( n%2 != k%2 )    count++;
            n=n/2;  k=k/2;
        }

        return count;
    }
}
