You are given a string s consisting only of characters 'a' and 'b'​​​​.

You can delete any number of characters in s to make s balanced. s is balanced if there is no pair of indices (i,j) such that i < j and s[i] = 'b' and s[j]= 'a'.

Return the minimum number of deletions needed to make s balanced.


You need to find for every index the number of 'b's before it and the number of 'a's after it
You can speed up the finding of 'a's and 'b's in suffix and prefix using preprocessing


class Solution {
public:
    int minimumDeletions(string s)
    {
        int n=s.length();

        vector<int> pre(n), suf(n);

        for(int i=1; i<n; i++)
        {
            if(s[i-1]=='b')   pre[i] = pre[i-1] + 1;
            else pre[i] = pre[i-1];
        }

        for(int i=n-2; i>=0; i--)
        {
            if(s[i+1]=='a')     suf[i] = suf[i+1] + 1;
            else suf[i] = suf[i+1];
        }

        int res=INT_MAX;

        for(int i=0; i<n; i++)
        {
            res = min(res, pre[i] + suf[i] );
        }

        return res;
    }
};
